/*
	MIT License

	Copyright (c) 2023 RealTimeChris

	Permission is hereby granted, free of charge, to any person obtaining a copy of this
	software and associated documentation files (the "Software"), to deal in the Software
	without restriction, including without limitation the rights to use, copy, modify, merge,
	publish, distribute, sublicense, and/or sell copies of the Software, and to permit
	persons to whom the Software is furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in all copies or
	substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
	INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
	PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
	FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
	DEALINGS IN THE SOFTWARE.
*/
/// Note: Most of the code in this header was sampled from Glaze library: https://github.com/stephenberry/glaze
/// https://github.com/RealTimeChris/jsonifier
/// Nov 13, 2023
#pragma once

#include <jsonifier/Allocator.hpp>

#include <concepts>
#include <cstdint>
#include <cstring>
#include <array>

#if defined(_M_X64) || defined(_M_ARM64)
	#include <intrin.h>
#endif

namespace jsonifier_internal {

	JSONIFIER_INLINE void u128Mul(uint64_t a, uint64_t b, uint64_t* hi, uint64_t* lo) noexcept {
#if defined(__SIZEOF_INT128__)
		unsigned __int128 m = static_cast<unsigned __int128>(a) * b;
		*hi					= uint64_t(m >> 64);
		*lo					= uint64_t(m);
#elif defined(_M_X64)
		*lo = _umul128(a, b, hi);
#elif defined(_M_ARM64)
		*hi = __umulh(a, b);
		*lo = a * b;
#else
		uint32_t a0 = static_cast<uint32_t>(a), a1 = static_cast<uint32_t>(a >> 32);
		uint32_t b0 = static_cast<uint32_t>(b), b1 = static_cast<uint32_t>(b >> 32);
		uint64_t p00 = static_cast<uint64_t>(a0) * b0;
		uint64_t p01 = static_cast<uint64_t>(a0) * b1;
		uint64_t p10 = static_cast<uint64_t>(a1) * b0;
		uint64_t p11 = static_cast<uint64_t>(a1) * b1;
		uint64_t m0	 = p01 + (p00 >> 32);
		uint32_t m00 = static_cast<uint32_t>(m0), m01 = static_cast<uint32_t>(m0 >> 32);
		uint64_t m1	 = p10 + m00;
		uint32_t m10 = static_cast<uint32_t>(m1), m11 = static_cast<uint32_t>(m1 >> 32);
		*hi = p11 + m01 + m11;
		*lo = (static_cast<uint64_t>(m10) << 32) | static_cast<uint32_t>(p00);
#endif
	}

	JSONIFIER_INLINE void u128MulAdd(uint64_t a, uint64_t b, uint64_t c, uint64_t* hi, uint64_t* lo) noexcept {
#if defined(__SIZEOF_INT128__)
		unsigned __int128 m = static_cast<unsigned __int128>(a) * b + c;
		*hi					= uint64_t(m >> 64);
		*lo					= uint64_t(m);
#else
		uint64_t h, l, t;
		u128Mul(a, b, &h, &l);
		t = l + c;
		h += (t < l);
		*hi = h;
		*lo = t;
#endif
	}

	JSONIFIER_INLINE uint64_t roundToOdd(uint64_t hi, uint64_t lo, uint64_t cp) noexcept {
		uint64_t x_hi, x_lo, y_hi, y_lo;
		u128Mul(cp, lo, &x_hi, &x_lo);
		u128MulAdd(cp, hi, x_hi, &y_hi, &y_lo);
		return y_hi | (y_lo > 1);
	}

	constexpr std::array<uint64_t, 1336> pow10SigTable128{ 0xBF29DCABA82FDEAEull, 0x7432EE873880FC33ull, 0xEEF453D6923BD65Aull, 0x113FAA2906A13B3Full, 0x9558B4661B6565F8ull,
		0x4AC7CA59A424C507ull, 0xBAAEE17FA23EBF76ull, 0x5D79BCF00D2DF649ull, 0xE95A99DF8ACE6F53ull, 0xF4D82C2C107973DCull, 0x91D8A02BB6C10594ull, 0x79071B9B8A4BE869ull,
		0xB64EC836A47146F9ull, 0x9748E2826CDEE284ull, 0xE3E27A444D8D98B7ull, 0xFD1B1B2308169B25ull, 0x8E6D8C6AB0787F72ull, 0xFE30F0F5E50E20F7ull, 0xB208EF855C969F4Full,
		0xBDBD2D335E51A935ull, 0xDE8B2B66B3BC4723ull, 0xAD2C788035E61382ull, 0x8B16FB203055AC76ull, 0x4C3BCB5021AFCC31ull, 0xADDCB9E83C6B1793ull, 0xDF4ABE242A1BBF3Dull,
		0xD953E8624B85DD78ull, 0xD71D6DAD34A2AF0Dull, 0x87D4713D6F33AA6Bull, 0x8672648C40E5AD68ull, 0xA9C98D8CCB009506ull, 0x680EFDAF511F18C2ull, 0xD43BF0EFFDC0BA48ull,
		0x0212BD1B2566DEF2ull, 0x84A57695FE98746Dull, 0x014BB630F7604B57ull, 0xA5CED43B7E3E9188ull, 0x419EA3BD35385E2Dull, 0xCF42894A5DCE35EAull, 0x52064CAC828675B9ull,
		0x818995CE7AA0E1B2ull, 0x7343EFEBD1940993ull, 0xA1EBFB4219491A1Full, 0x1014EBE6C5F90BF8ull, 0xCA66FA129F9B60A6ull, 0xD41A26E077774EF6ull, 0xFD00B897478238D0ull,
		0x8920B098955522B4ull, 0x9E20735E8CB16382ull, 0x55B46E5F5D5535B0ull, 0xC5A890362FDDBC62ull, 0xEB2189F734AA831Dull, 0xF712B443BBD52B7Bull, 0xA5E9EC7501D523E4ull,
		0x9A6BB0AA55653B2Dull, 0x47B233C92125366Eull, 0xC1069CD4EABE89F8ull, 0x999EC0BB696E840Aull, 0xF148440A256E2C76ull, 0xC00670EA43CA250Dull, 0x96CD2A865764DBCAull,
		0x380406926A5E5728ull, 0xBC807527ED3E12BCull, 0xC605083704F5ECF2ull, 0xEBA09271E88D976Bull, 0xF7864A44C633682Eull, 0x93445B8731587EA3ull, 0x7AB3EE6AFBE0211Dull,
		0xB8157268FDAE9E4Cull, 0x5960EA05BAD82964ull, 0xE61ACF033D1A45DFull, 0x6FB92487298E33BDull, 0x8FD0C16206306BABull, 0xA5D3B6D479F8E056ull, 0xB3C4F1BA87BC8696ull,
		0x8F48A4899877186Cull, 0xE0B62E2929ABA83Cull, 0x331ACDABFE94DE87ull, 0x8C71DCD9BA0B4925ull, 0x9FF0C08B7F1D0B14ull, 0xAF8E5410288E1B6Full, 0x07ECF0AE5EE44DD9ull,
		0xDB71E91432B1A24Aull, 0xC9E82CD9F69D6150ull, 0x892731AC9FAF056Eull, 0xBE311C083A225CD2ull, 0xAB70FE17C79AC6CAull, 0x6DBD630A48AAF406ull, 0xD64D3D9DB981787Dull,
		0x092CBBCCDAD5B108ull, 0x85F0468293F0EB4Eull, 0x25BBF56008C58EA5ull, 0xA76C582338ED2621ull, 0xAF2AF2B80AF6F24Eull, 0xD1476E2C07286FAAull, 0x1AF5AF660DB4AEE1ull,
		0x82CCA4DB847945CAull, 0x50D98D9FC890ED4Dull, 0xA37FCE126597973Cull, 0xE50FF107BAB528A0ull, 0xCC5FC196FEFD7D0Cull, 0x1E53ED49A96272C8ull, 0xFF77B1FCBEBCDC4Full,
		0x25E8E89C13BB0F7Aull, 0x9FAACF3DF73609B1ull, 0x77B191618C54E9ACull, 0xC795830D75038C1Dull, 0xD59DF5B9EF6A2417ull, 0xF97AE3D0D2446F25ull, 0x4B0573286B44AD1Dull,
		0x9BECCE62836AC577ull, 0x4EE367F9430AEC32ull, 0xC2E801FB244576D5ull, 0x229C41F793CDA73Full, 0xF3A20279ED56D48Aull, 0x6B43527578C1110Full, 0x9845418C345644D6ull,
		0x830A13896B78AAA9ull, 0xBE5691EF416BD60Cull, 0x23CC986BC656D553ull, 0xEDEC366B11C6CB8Full, 0x2CBFBE86B7EC8AA8ull, 0x94B3A202EB1C3F39ull, 0x7BF7D71432F3D6A9ull,
		0xB9E08A83A5E34F07ull, 0xDAF5CCD93FB0CC53ull, 0xE858AD248F5C22C9ull, 0xD1B3400F8F9CFF68ull, 0x91376C36D99995BEull, 0x23100809B9C21FA1ull, 0xB58547448FFFFB2Dull,
		0xABD40A0C2832A78Aull, 0xE2E69915B3FFF9F9ull, 0x16C90C8F323F516Cull, 0x8DD01FAD907FFC3Bull, 0xAE3DA7D97F6792E3ull, 0xB1442798F49FFB4Aull, 0x99CD11CFDF41779Cull,
		0xDD95317F31C7FA1Dull, 0x40405643D711D583ull, 0x8A7D3EEF7F1CFC52ull, 0x482835EA666B2572ull, 0xAD1C8EAB5EE43B66ull, 0xDA3243650005EECFull, 0xD863B256369D4A40ull,
		0x90BED43E40076A82ull, 0x873E4F75E2224E68ull, 0x5A7744A6E804A291ull, 0xA90DE3535AAAE202ull, 0x711515D0A205CB36ull, 0xD3515C2831559A83ull, 0x0D5A5B44CA873E03ull,
		0x8412D9991ED58091ull, 0xE858790AFE9486C2ull, 0xA5178FFF668AE0B6ull, 0x626E974DBE39A872ull, 0xCE5D73FF402D98E3ull, 0xFB0A3D212DC8128Full, 0x80FA687F881C7F8Eull,
		0x7CE66634BC9D0B99ull, 0xA139029F6A239F72ull, 0x1C1FFFC1EBC44E80ull, 0xC987434744AC874Eull, 0xA327FFB266B56220ull, 0xFBE9141915D7A922ull, 0x4BF1FF9F0062BAA8ull,
		0x9D71AC8FADA6C9B5ull, 0x6F773FC3603DB4A9ull, 0xC4CE17B399107C22ull, 0xCB550FB4384D21D3ull, 0xF6019DA07F549B2Bull, 0x7E2A53A146606A48ull, 0x99C102844F94E0FBull,
		0x2EDA7444CBFC426Dull, 0xC0314325637A1939ull, 0xFA911155FEFB5308ull, 0xF03D93EEBC589F88ull, 0x793555AB7EBA27CAull, 0x96267C7535B763B5ull, 0x4BC1558B2F3458DEull,
		0xBBB01B9283253CA2ull, 0x9EB1AAEDFB016F16ull, 0xEA9C227723EE8BCBull, 0x465E15A979C1CADCull, 0x92A1958A7675175Full, 0x0BFACD89EC191EC9ull, 0xB749FAED14125D36ull,
		0xCEF980EC671F667Bull, 0xE51C79A85916F484ull, 0x82B7E12780E7401Aull, 0x8F31CC0937AE58D2ull, 0xD1B2ECB8B0908810ull, 0xB2FE3F0B8599EF07ull, 0x861FA7E6DCB4AA15ull,
		0xDFBDCECE67006AC9ull, 0x67A791E093E1D49Aull, 0x8BD6A141006042BDull, 0xE0C8BB2C5C6D24E0ull, 0xAECC49914078536Dull, 0x58FAE9F773886E18ull, 0xDA7F5BF590966848ull,
		0xAF39A475506A899Eull, 0x888F99797A5E012Dull, 0x6D8406C952429603ull, 0xAAB37FD7D8F58178ull, 0xC8E5087BA6D33B83ull, 0xD5605FCDCF32E1D6ull, 0xFB1E4A9A90880A64ull,
		0x855C3BE0A17FCD26ull, 0x5CF2EEA09A55067Full, 0xA6B34AD8C9DFC06Full, 0xF42FAA48C0EA481Eull, 0xD0601D8EFC57B08Bull, 0xF13B94DAF124DA26ull, 0x823C12795DB6CE57ull,
		0x76C53D08D6B70858ull, 0xA2CB1717B52481EDull, 0x54768C4B0C64CA6Eull, 0xCB7DDCDDA26DA268ull, 0xA9942F5DCF7DFD09ull, 0xFE5D54150B090B02ull, 0xD3F93B35435D7C4Cull,
		0x9EFA548D26E5A6E1ull, 0xC47BC5014A1A6DAFull, 0xC6B8E9B0709F109Aull, 0x359AB6419CA1091Bull, 0xF867241C8CC6D4C0ull, 0xC30163D203C94B62ull, 0x9B407691D7FC44F8ull,
		0x79E0DE63425DCF1Dull, 0xC21094364DFB5636ull, 0x985915FC12F542E4ull, 0xF294B943E17A2BC4ull, 0x3E6F5B7B17B2939Dull, 0x979CF3CA6CEC5B5Aull, 0xA705992CEECF9C42ull,
		0xBD8430BD08277231ull, 0x50C6FF782A838353ull, 0xECE53CEC4A314EBDull, 0xA4F8BF5635246428ull, 0x940F4613AE5ED136ull, 0x871B7795E136BE99ull, 0xB913179899F68584ull,
		0x28E2557B59846E3Full, 0xE757DD7EC07426E5ull, 0x331AEADA2FE589CFull, 0x9096EA6F3848984Full, 0x3FF0D2C85DEF7621ull, 0xB4BCA50B065ABE63ull, 0x0FED077A756B53A9ull,
		0xE1EBCE4DC7F16DFBull, 0xD3E8495912C62894ull, 0x8D3360F09CF6E4BDull, 0x64712DD7ABBBD95Cull, 0xB080392CC4349DECull, 0xBD8D794D96AACFB3ull, 0xDCA04777F541C567ull,
		0xECF0D7A0FC5583A0ull, 0x89E42CAAF9491B60ull, 0xF41686C49DB57244ull, 0xAC5D37D5B79B6239ull, 0x311C2875C522CED5ull, 0xD77485CB25823AC7ull, 0x7D633293366B828Bull,
		0x86A8D39EF77164BCull, 0xAE5DFF9C02033197ull, 0xA8530886B54DBDEBull, 0xD9F57F830283FDFCull, 0xD267CAA862A12D66ull, 0xD072DF63C324FD7Bull, 0x8380DEA93DA4BC60ull,
		0x4247CB9E59F71E6Dull, 0xA46116538D0DEB78ull, 0x52D9BE85F074E608ull, 0xCD795BE870516656ull, 0x67902E276C921F8Bull, 0x806BD9714632DFF6ull, 0x00BA1CD8A3DB53B6ull,
		0xA086CFCD97BF97F3ull, 0x80E8A40ECCD228A4ull, 0xC8A883C0FDAF7DF0ull, 0x6122CD128006B2CDull, 0xFAD2A4B13D1B5D6Cull, 0x796B805720085F81ull, 0x9CC3A6EEC6311A63ull,
		0xCBE3303674053BB0ull, 0xC3F490AA77BD60FCull, 0xBEDBFC4411068A9Cull, 0xF4F1B4D515ACB93Bull, 0xEE92FB5515482D44ull, 0x991711052D8BF3C5ull, 0x751BDD152D4D1C4Aull,
		0xBF5CD54678EEF0B6ull, 0xD262D45A78A0635Dull, 0xEF340A98172AACE4ull, 0x86FB897116C87C34ull, 0x9580869F0E7AAC0Eull, 0xD45D35E6AE3D4DA0ull, 0xBAE0A846D2195712ull,
		0x8974836059CCA109ull, 0xE998D258869FACD7ull, 0x2BD1A438703FC94Bull, 0x91FF83775423CC06ull, 0x7B6306A34627DDCFull, 0xB67F6455292CBF08ull, 0x1A3BC84C17B1D542ull,
		0xE41F3D6A7377EECAull, 0x20CABA5F1D9E4A93ull, 0x8E938662882AF53Eull, 0x547EB47B7282EE9Cull, 0xB23867FB2A35B28Dull, 0xE99E619A4F23AA43ull, 0xDEC681F9F4C31F31ull,
		0x6405FA00E2EC94D4ull, 0x8B3C113C38F9F37Eull, 0xDE83BC408DD3DD04ull, 0xAE0B158B4738705Eull, 0x9624AB50B148D445ull, 0xD98DDAEE19068C76ull, 0x3BADD624DD9B0957ull,
		0x87F8A8D4CFA417C9ull, 0xE54CA5D70A80E5D6ull, 0xA9F6D30A038D1DBCull, 0x5E9FCF4CCD211F4Cull, 0xD47487CC8470652Bull, 0x7647C3200069671Full, 0x84C8D4DFD2C63F3Bull,
		0x29ECD9F40041E073ull, 0xA5FB0A17C777CF09ull, 0xF468107100525890ull, 0xCF79CC9DB955C2CCull, 0x7182148D4066EEB4ull, 0x81AC1FE293D599BFull, 0xC6F14CD848405530ull,
		0xA21727DB38CB002Full, 0xB8ADA00E5A506A7Cull, 0xCA9CF1D206FDC03Bull, 0xA6D90811F0E4851Cull, 0xFD442E4688BD304Aull, 0x908F4A166D1DA663ull, 0x9E4A9CEC15763E2Eull,
		0x9A598E4E043287FEull, 0xC5DD44271AD3CDBAull, 0x40EFF1E1853F29FDull, 0xF7549530E188C128ull, 0xD12BEE59E68EF47Cull, 0x9A94DD3E8CF578B9ull, 0x82BB74F8301958CEull,
		0xC13A148E3032D6E7ull, 0xE36A52363C1FAF01ull, 0xF18899B1BC3F8CA1ull, 0xDC44E6C3CB279AC1ull, 0x96F5600F15A7B7E5ull, 0x29AB103A5EF8C0B9ull, 0xBCB2B812DB11A5DEull,
		0x7415D448F6B6F0E7ull, 0xEBDF661791D60F56ull, 0x111B495B3464AD21ull, 0x936B9FCEBB25C995ull, 0xCAB10DD900BEEC34ull, 0xB84687C269EF3BFBull, 0x3D5D514F40EEA742ull,
		0xE65829B3046B0AFAull, 0x0CB4A5A3112A5112ull, 0x8FF71A0FE2C2E6DCull, 0x47F0E785EABA72ABull, 0xB3F4E093DB73A093ull, 0x59ED216765690F56ull, 0xE0F218B8D25088B8ull,
		0x306869C13EC3532Cull, 0x8C974F7383725573ull, 0x1E414218C73A13FBull, 0xAFBD2350644EEACFull, 0xE5D1929EF90898FAull, 0xDBAC6C247D62A583ull, 0xDF45F746B74ABF39ull,
		0x894BC396CE5DA772ull, 0x6B8BBA8C328EB783ull, 0xAB9EB47C81F5114Full, 0x066EA92F3F326564ull, 0xD686619BA27255A2ull, 0xC80A537B0EFEFEBDull, 0x8613FD0145877585ull,
		0xBD06742CE95F5F36ull, 0xA798FC4196E952E7ull, 0x2C48113823B73704ull, 0xD17F3B51FCA3A7A0ull, 0xF75A15862CA504C5ull, 0x82EF85133DE648C4ull, 0x9A984D73DBE722FBull,
		0xA3AB66580D5FDAF5ull, 0xC13E60D0D2E0EBBAull, 0xCC963FEE10B7D1B3ull, 0x318DF905079926A8ull, 0xFFBBCFE994E5C61Full, 0xFDF17746497F7052ull, 0x9FD561F1FD0F9BD3ull,
		0xFEB6EA8BEDEFA633ull, 0xC7CABA6E7C5382C8ull, 0xFE64A52EE96B8FC0ull, 0xF9BD690A1B68637Bull, 0x3DFDCE7AA3C673B0ull, 0x9C1661A651213E2Dull, 0x06BEA10CA65C084Eull,
		0xC31BFA0FE5698DB8ull, 0x486E494FCFF30A62ull, 0xF3E2F893DEC3F126ull, 0x5A89DBA3C3EFCCFAull, 0x986DDB5C6B3A76B7ull, 0xF89629465A75E01Cull, 0xBE89523386091465ull,
		0xF6BBB397F1135823ull, 0xEE2BA6C0678B597Full, 0x746AA07DED582E2Cull, 0x94DB483840B717EFull, 0xA8C2A44EB4571CDCull, 0xBA121A4650E4DDEBull, 0x92F34D62616CE413ull,
		0xE896A0D7E51E1566ull, 0x77B020BAF9C81D17ull, 0x915E2486EF32CD60ull, 0x0ACE1474DC1D122Eull, 0xB5B5ADA8AAFF80B8ull, 0x0D819992132456BAull, 0xE3231912D5BF60E6ull,
		0x10E1FFF697ED6C69ull, 0x8DF5EFABC5979C8Full, 0xCA8D3FFA1EF463C1ull, 0xB1736B96B6FD83B3ull, 0xBD308FF8A6B17CB2ull, 0xDDD0467C64BCE4A0ull, 0xAC7CB3F6D05DDBDEull,
		0x8AA22C0DBEF60EE4ull, 0x6BCDF07A423AA96Bull, 0xAD4AB7112EB3929Dull, 0x86C16C98D2C953C6ull, 0xD89D64D57A607744ull, 0xE871C7BF077BA8B7ull, 0x87625F056C7C4A8Bull,
		0x11471CD764AD4972ull, 0xA93AF6C6C79B5D2Dull, 0xD598E40D3DD89BCFull, 0xD389B47879823479ull, 0x4AFF1D108D4EC2C3ull, 0x843610CB4BF160CBull, 0xCEDF722A585139BAull,
		0xA54394FE1EEDB8FEull, 0xC2974EB4EE658828ull, 0xCE947A3DA6A9273Eull, 0x733D226229FEEA32ull, 0x811CCC668829B887ull, 0x0806357D5A3F525Full, 0xA163FF802A3426A8ull,
		0xCA07C2DCB0CF26F7ull, 0xC9BCFF6034C13052ull, 0xFC89B393DD02F0B5ull, 0xFC2C3F3841F17C67ull, 0xBBAC2078D443ACE2ull, 0x9D9BA7832936EDC0ull, 0xD54B944B84AA4C0Dull,
		0xC5029163F384A931ull, 0x0A9E795E65D4DF11ull, 0xF64335BCF065D37Dull, 0x4D4617B5FF4A16D5ull, 0x99EA0196163FA42Eull, 0x504BCED1BF8E4E45ull, 0xC06481FB9BCF8D39ull,
		0xE45EC2862F71E1D6ull, 0xF07DA27A82C37088ull, 0x5D767327BB4E5A4Cull, 0x964E858C91BA2655ull, 0x3A6A07F8D510F86Full, 0xBBE226EFB628AFEAull, 0x890489F70A55368Bull,
		0xEADAB0ABA3B2DBE5ull, 0x2B45AC74CCEA842Eull, 0x92C8AE6B464FC96Full, 0x3B0B8BC90012929Dull, 0xB77ADA0617E3BBCBull, 0x09CE6EBB40173744ull, 0xE55990879DDCAABDull,
		0xCC420A6A101D0515ull, 0x8F57FA54C2A9EAB6ull, 0x9FA946824A12232Dull, 0xB32DF8E9F3546564ull, 0x47939822DC96ABF9ull, 0xDFF9772470297EBDull, 0x59787E2B93BC56F7ull,
		0x8BFBEA76C619EF36ull, 0x57EB4EDB3C55B65Aull, 0xAEFAE51477A06B03ull, 0xEDE622920B6B23F1ull, 0xDAB99E59958885C4ull, 0xE95FAB368E45ECEDull, 0x88B402F7FD75539Bull,
		0x11DBCB0218EBB414ull, 0xAAE103B5FCD2A881ull, 0xD652BDC29F26A119ull, 0xD59944A37C0752A2ull, 0x4BE76D3346F0495Full, 0x857FCAE62D8493A5ull, 0x6F70A4400C562DDBull,
		0xA6DFBD9FB8E5B88Eull, 0xCB4CCD500F6BB952ull, 0xD097AD07A71F26B2ull, 0x7E2000A41346A7A7ull, 0x825ECC24C873782Full, 0x8ED400668C0C28C8ull, 0xA2F67F2DFA90563Bull,
		0x728900802F0F32FAull, 0xCBB41EF979346BCAull, 0x4F2B40A03AD2FFB9ull, 0xFEA126B7D78186BCull, 0xE2F610C84987BFA8ull, 0x9F24B832E6B0F436ull, 0x0DD9CA7D2DF4D7C9ull,
		0xC6EDE63FA05D3143ull, 0x91503D1C79720DBBull, 0xF8A95FCF88747D94ull, 0x75A44C6397CE912Aull, 0x9B69DBE1B548CE7Cull, 0xC986AFBE3EE11ABAull, 0xC24452DA229B021Bull,
		0xFBE85BADCE996168ull, 0xF2D56790AB41C2A2ull, 0xFAE27299423FB9C3ull, 0x97C560BA6B0919A5ull, 0xDCCD879FC967D41Aull, 0xBDB6B8E905CB600Full, 0x5400E987BBC1C920ull,
		0xED246723473E3813ull, 0x290123E9AAB23B68ull, 0x9436C0760C86E30Bull, 0xF9A0B6720AAF6521ull, 0xB94470938FA89BCEull, 0xF808E40E8D5B3E69ull, 0xE7958CB87392C2C2ull,
		0xB60B1D1230B20E04ull, 0x90BD77F3483BB9B9ull, 0xB1C6F22B5E6F48C2ull, 0xB4ECD5F01A4AA828ull, 0x1E38AEB6360B1AF3ull, 0xE2280B6C20DD5232ull, 0x25C6DA63C38DE1B0ull,
		0x8D590723948A535Full, 0x579C487E5A38AD0Eull, 0xB0AF48EC79ACE837ull, 0x2D835A9DF0C6D851ull, 0xDCDB1B2798182244ull, 0xF8E431456CF88E65ull, 0x8A08F0F8BF0F156Bull,
		0x1B8E9ECB641B58FFull, 0xAC8B2D36EED2DAC5ull, 0xE272467E3D222F3Full, 0xD7ADF884AA879177ull, 0x5B0ED81DCC6ABB0Full, 0x86CCBB52EA94BAEAull, 0x98E947129FC2B4E9ull,
		0xA87FEA27A539E9A5ull, 0x3F2398D747B36224ull, 0xD29FE4B18E88640Eull, 0x8EEC7F0D19A03AADull, 0x83A3EEEEF9153E89ull, 0x1953CF68300424ACull, 0xA48CEAAAB75A8E2Bull,
		0x5FA8C3423C052DD7ull, 0xCDB02555653131B6ull, 0x3792F412CB06794Dull, 0x808E17555F3EBF11ull, 0xE2BBD88BBEE40BD0ull, 0xA0B19D2AB70E6ED6ull, 0x5B6ACEAEAE9D0EC4ull,
		0xC8DE047564D20A8Bull, 0xF245825A5A445275ull, 0xFB158592BE068D2Eull, 0xEED6E2F0F0D56712ull, 0x9CED737BB6C4183Dull, 0x55464DD69685606Bull, 0xC428D05AA4751E4Cull,
		0xAA97E14C3C26B886ull, 0xF53304714D9265DFull, 0xD53DD99F4B3066A8ull, 0x993FE2C6D07B7FABull, 0xE546A8038EFE4029ull, 0xBF8FDB78849A5F96ull, 0xDE98520472BDD033ull,
		0xEF73D256A5C0F77Cull, 0x963E66858F6D4440ull, 0x95A8637627989AADull, 0xDDE7001379A44AA8ull, 0xBB127C53B17EC159ull, 0x5560C018580D5D52ull, 0xE9D71B689DDE71AFull,
		0xAAB8F01E6E10B4A6ull, 0x9226712162AB070Dull, 0xCAB3961304CA70E8ull, 0xB6B00D69BB55C8D1ull, 0x3D607B97C5FD0D22ull, 0xE45C10C42A2B3B05ull, 0x8CB89A7DB77C506Aull,
		0x8EB98A7A9A5B04E3ull, 0x77F3608E92ADB242ull, 0xB267ED1940F1C61Cull, 0x55F038B237591ED3ull, 0xDF01E85F912E37A3ull, 0x6B6C46DEC52F6688ull, 0x8B61313BBABCE2C6ull,
		0x2323AC4B3B3DA015ull, 0xAE397D8AA96C1B77ull, 0xABEC975E0A0D081Aull, 0xD9C7DCED53C72255ull, 0x96E7BD358C904A21ull, 0x881CEA14545C7575ull, 0x7E50D64177DA2E54ull,
		0xAA242499697392D2ull, 0xDDE50BD1D5D0B9E9ull, 0xD4AD2DBFC3D07787ull, 0x955E4EC64B44E864ull, 0x84EC3C97DA624AB4ull, 0xBD5AF13BEF0B113Eull, 0xA6274BBDD0FADD61ull,
		0xECB1AD8AEACDD58Eull, 0xCFB11EAD453994BAull, 0x67DE18EDA5814AF2ull, 0x81CEB32C4B43FCF4ull, 0x80EACF948770CED7ull, 0xA2425FF75E14FC31ull, 0xA1258379A94D028Dull,
		0xCAD2F7F5359A3B3Eull, 0x096EE45813A04330ull, 0xFD87B5F28300CA0Dull, 0x8BCA9D6E188853FCull, 0x9E74D1B791E07E48ull, 0x775EA264CF55347Dull, 0xC612062576589DDAull,
		0x95364AFE032A819Dull, 0xF79687AED3EEC551ull, 0x3A83DDBD83F52204ull, 0x9ABE14CD44753B52ull, 0xC4926A9672793542ull, 0xC16D9A0095928A27ull, 0x75B7053C0F178293ull,
		0xF1C90080BAF72CB1ull, 0x5324C68B12DD6338ull, 0x971DA05074DA7BEEull, 0xD3F6FC16EBCA5E03ull, 0xBCE5086492111AEAull, 0x88F4BB1CA6BCF584ull, 0xEC1E4A7DB69561A5ull,
		0x2B31E9E3D06C32E5ull, 0x9392EE8E921D5D07ull, 0x3AFF322E62439FCFull, 0xB877AA3236A4B449ull, 0x09BEFEB9FAD487C2ull, 0xE69594BEC44DE15Bull, 0x4C2EBE687989A9B3ull,
		0x901D7CF73AB0ACD9ull, 0x0F9D37014BF60A10ull, 0xB424DC35095CD80Full, 0x538484C19EF38C94ull, 0xE12E13424BB40E13ull, 0x2865A5F206B06FB9ull, 0x8CBCCC096F5088CBull,
		0xF93F87B7442E45D3ull, 0xAFEBFF0BCB24AAFEull, 0xF78F69A51539D748ull, 0xDBE6FECEBDEDD5BEull, 0xB573440E5A884D1Bull, 0x89705F4136B4A597ull, 0x31680A88F8953030ull,
		0xABCC77118461CEFCull, 0xFDC20D2B36BA7C3Dull, 0xD6BF94D5E57A42BCull, 0x3D32907604691B4Cull, 0x8637BD05AF6C69B5ull, 0xA63F9A49C2C1B10Full, 0xA7C5AC471B478423ull,
		0x0FCF80DC33721D53ull, 0xD1B71758E219652Bull, 0xD3C36113404EA4A8ull, 0x83126E978D4FDF3Bull, 0x645A1CAC083126E9ull, 0xA3D70A3D70A3D70Aull, 0x3D70A3D70A3D70A3ull,
		0xCCCCCCCCCCCCCCCCull, 0xCCCCCCCCCCCCCCCCull, 0x8000000000000000ull, 0x0000000000000000ull, 0xA000000000000000ull, 0x0000000000000000ull, 0xC800000000000000ull,
		0x0000000000000000ull, 0xFA00000000000000ull, 0x0000000000000000ull, 0x9C40000000000000ull, 0x0000000000000000ull, 0xC350000000000000ull, 0x0000000000000000ull,
		0xF424000000000000ull, 0x0000000000000000ull, 0x9896800000000000ull, 0x0000000000000000ull, 0xBEBC200000000000ull, 0x0000000000000000ull, 0xEE6B280000000000ull,
		0x0000000000000000ull, 0x9502F90000000000ull, 0x0000000000000000ull, 0xBA43B74000000000ull, 0x0000000000000000ull, 0xE8D4A51000000000ull, 0x0000000000000000ull,
		0x9184E72A00000000ull, 0x0000000000000000ull, 0xB5E620F480000000ull, 0x0000000000000000ull, 0xE35FA931A0000000ull, 0x0000000000000000ull, 0x8E1BC9BF04000000ull,
		0x0000000000000000ull, 0xB1A2BC2EC5000000ull, 0x0000000000000000ull, 0xDE0B6B3A76400000ull, 0x0000000000000000ull, 0x8AC7230489E80000ull, 0x0000000000000000ull,
		0xAD78EBC5AC620000ull, 0x0000000000000000ull, 0xD8D726B7177A8000ull, 0x0000000000000000ull, 0x878678326EAC9000ull, 0x0000000000000000ull, 0xA968163F0A57B400ull,
		0x0000000000000000ull, 0xD3C21BCECCEDA100ull, 0x0000000000000000ull, 0x84595161401484A0ull, 0x0000000000000000ull, 0xA56FA5B99019A5C8ull, 0x0000000000000000ull,
		0xCECB8F27F4200F3Aull, 0x0000000000000000ull, 0x813F3978F8940984ull, 0x4000000000000000ull, 0xA18F07D736B90BE5ull, 0x5000000000000000ull, 0xC9F2C9CD04674EDEull,
		0xA400000000000000ull, 0xFC6F7C4045812296ull, 0x4D00000000000000ull, 0x9DC5ADA82B70B59Dull, 0xF020000000000000ull, 0xC5371912364CE305ull, 0x6C28000000000000ull,
		0xF684DF56C3E01BC6ull, 0xC732000000000000ull, 0x9A130B963A6C115Cull, 0x3C7F400000000000ull, 0xC097CE7BC90715B3ull, 0x4B9F100000000000ull, 0xF0BDC21ABB48DB20ull,
		0x1E86D40000000000ull, 0x96769950B50D88F4ull, 0x1314448000000000ull, 0xBC143FA4E250EB31ull, 0x17D955A000000000ull, 0xEB194F8E1AE525FDull, 0x5DCFAB0800000000ull,
		0x92EFD1B8D0CF37BEull, 0x5AA1CAE500000000ull, 0xB7ABC627050305ADull, 0xF14A3D9E40000000ull, 0xE596B7B0C643C719ull, 0x6D9CCD05D0000000ull, 0x8F7E32CE7BEA5C6Full,
		0xE4820023A2000000ull, 0xB35DBF821AE4F38Bull, 0xDDA2802C8A800000ull, 0xE0352F62A19E306Eull, 0xD50B2037AD200000ull, 0x8C213D9DA502DE45ull, 0x4526F422CC340000ull,
		0xAF298D050E4395D6ull, 0x9670B12B7F410000ull, 0xDAF3F04651D47B4Cull, 0x3C0CDD765F114000ull, 0x88D8762BF324CD0Full, 0xA5880A69FB6AC800ull, 0xAB0E93B6EFEE0053ull,
		0x8EEA0D047A457A00ull, 0xD5D238A4ABE98068ull, 0x72A4904598D6D880ull, 0x85A36366EB71F041ull, 0x47A6DA2B7F864750ull, 0xA70C3C40A64E6C51ull, 0x999090B65F67D924ull,
		0xD0CF4B50CFE20765ull, 0xFFF4B4E3F741CF6Dull, 0x82818F1281ED449Full, 0xBFF8F10E7A8921A4ull, 0xA321F2D7226895C7ull, 0xAFF72D52192B6A0Dull, 0xCBEA6F8CEB02BB39ull,
		0x9BF4F8A69F764490ull, 0xFEE50B7025C36A08ull, 0x02F236D04753D5B4ull, 0x9F4F2726179A2245ull, 0x01D762422C946590ull, 0xC722F0EF9D80AAD6ull, 0x424D3AD2B7B97EF5ull,
		0xF8EBAD2B84E0D58Bull, 0xD2E0898765A7DEB2ull, 0x9B934C3B330C8577ull, 0x63CC55F49F88EB2Full, 0xC2781F49FFCFA6D5ull, 0x3CBF6B71C76B25FBull, 0xF316271C7FC3908Aull,
		0x8BEF464E3945EF7Aull, 0x97EDD871CFDA3A56ull, 0x97758BF0E3CBB5ACull, 0xBDE94E8E43D0C8ECull, 0x3D52EEED1CBEA317ull, 0xED63A231D4C4FB27ull, 0x4CA7AAA863EE4BDDull,
		0x945E455F24FB1CF8ull, 0x8FE8CAA93E74EF6Aull, 0xB975D6B6EE39E436ull, 0xB3E2FD538E122B44ull, 0xE7D34C64A9C85D44ull, 0x60DBBCA87196B616ull, 0x90E40FBEEA1D3A4Aull,
		0xBC8955E946FE31CDull, 0xB51D13AEA4A488DDull, 0x6BABAB6398BDBE41ull, 0xE264589A4DCDAB14ull, 0xC696963C7EED2DD1ull, 0x8D7EB76070A08AECull, 0xFC1E1DE5CF543CA2ull,
		0xB0DE65388CC8ADA8ull, 0x3B25A55F43294BCBull, 0xDD15FE86AFFAD912ull, 0x49EF0EB713F39EBEull, 0x8A2DBF142DFCC7ABull, 0x6E3569326C784337ull, 0xACB92ED9397BF996ull,
		0x49C2C37F07965404ull, 0xD7E77A8F87DAF7FBull, 0xDC33745EC97BE906ull, 0x86F0AC99B4E8DAFDull, 0x69A028BB3DED71A3ull, 0xA8ACD7C0222311BCull, 0xC40832EA0D68CE0Cull,
		0xD2D80DB02AABD62Bull, 0xF50A3FA490C30190ull, 0x83C7088E1AAB65DBull, 0x792667C6DA79E0FAull, 0xA4B8CAB1A1563F52ull, 0x577001B891185938ull, 0xCDE6FD5E09ABCF26ull,
		0xED4C0226B55E6F86ull, 0x80B05E5AC60B6178ull, 0x544F8158315B05B4ull, 0xA0DC75F1778E39D6ull, 0x696361AE3DB1C721ull, 0xC913936DD571C84Cull, 0x03BC3A19CD1E38E9ull,
		0xFB5878494ACE3A5Full, 0x04AB48A04065C723ull, 0x9D174B2DCEC0E47Bull, 0x62EB0D64283F9C76ull, 0xC45D1DF942711D9Aull, 0x3BA5D0BD324F8394ull, 0xF5746577930D6500ull,
		0xCA8F44EC7EE36479ull, 0x9968BF6ABBE85F20ull, 0x7E998B13CF4E1ECBull, 0xBFC2EF456AE276E8ull, 0x9E3FEDD8C321A67Eull, 0xEFB3AB16C59B14A2ull, 0xC5CFE94EF3EA101Eull,
		0x95D04AEE3B80ECE5ull, 0xBBA1F1D158724A12ull, 0xBB445DA9CA61281Full, 0x2A8A6E45AE8EDC97ull, 0xEA1575143CF97226ull, 0xF52D09D71A3293BDull, 0x924D692CA61BE758ull,
		0x593C2626705F9C56ull, 0xB6E0C377CFA2E12Eull, 0x6F8B2FB00C77836Cull, 0xE498F455C38B997Aull, 0x0B6DFB9C0F956447ull, 0x8EDF98B59A373FECull, 0x4724BD4189BD5EACull,
		0xB2977EE300C50FE7ull, 0x58EDEC91EC2CB657ull, 0xDF3D5E9BC0F653E1ull, 0x2F2967B66737E3EDull, 0x8B865B215899F46Cull, 0xBD79E0D20082EE74ull, 0xAE67F1E9AEC07187ull,
		0xECD8590680A3AA11ull, 0xDA01EE641A708DE9ull, 0xE80E6F4820CC9495ull, 0x884134FE908658B2ull, 0x3109058D147FDCDDull, 0xAA51823E34A7EEDEull, 0xBD4B46F0599FD415ull,
		0xD4E5E2CDC1D1EA96ull, 0x6C9E18AC7007C91Aull, 0x850FADC09923329Eull, 0x03E2CF6BC604DDB0ull, 0xA6539930BF6BFF45ull, 0x84DB8346B786151Cull, 0xCFE87F7CEF46FF16ull,
		0xE612641865679A63ull, 0x81F14FAE158C5F6Eull, 0x4FCB7E8F3F60C07Eull, 0xA26DA3999AEF7749ull, 0xE3BE5E330F38F09Dull, 0xCB090C8001AB551Cull, 0x5CADF5BFD3072CC5ull,
		0xFDCB4FA002162A63ull, 0x73D9732FC7C8F7F6ull, 0x9E9F11C4014DDA7Eull, 0x2867E7FDDCDD9AFAull, 0xC646D63501A1511Dull, 0xB281E1FD541501B8ull, 0xF7D88BC24209A565ull,
		0x1F225A7CA91A4226ull, 0x9AE757596946075Full, 0x3375788DE9B06958ull, 0xC1A12D2FC3978937ull, 0x0052D6B1641C83AEull, 0xF209787BB47D6B84ull, 0xC0678C5DBD23A49Aull,
		0x9745EB4D50CE6332ull, 0xF840B7BA963646E0ull, 0xBD176620A501FBFFull, 0xB650E5A93BC3D898ull, 0xEC5D3FA8CE427AFFull, 0xA3E51F138AB4CEBEull, 0x93BA47C980E98CDFull,
		0xC66F336C36B10137ull, 0xB8A8D9BBE123F017ull, 0xB80B0047445D4184ull, 0xE6D3102AD96CEC1Dull, 0xA60DC059157491E5ull, 0x9043EA1AC7E41392ull, 0x87C89837AD68DB2Full,
		0xB454E4A179DD1877ull, 0x29BABE4598C311FBull, 0xE16A1DC9D8545E94ull, 0xF4296DD6FEF3D67Aull, 0x8CE2529E2734BB1Dull, 0x1899E4A65F58660Cull, 0xB01AE745B101E9E4ull,
		0x5EC05DCFF72E7F8Full, 0xDC21A1171D42645Dull, 0x76707543F4FA1F73ull, 0x899504AE72497EBAull, 0x6A06494A791C53A8ull, 0xABFA45DA0EDBDE69ull, 0x0487DB9D17636892ull,
		0xD6F8D7509292D603ull, 0x45A9D2845D3C42B6ull, 0x865B86925B9BC5C2ull, 0x0B8A2392BA45A9B2ull, 0xA7F26836F282B732ull, 0x8E6CAC7768D7141Eull, 0xD1EF0244AF2364FFull,
		0x3207D795430CD926ull, 0x8335616AED761F1Full, 0x7F44E6BD49E807B8ull, 0xA402B9C5A8D3A6E7ull, 0x5F16206C9C6209A6ull, 0xCD036837130890A1ull, 0x36DBA887C37A8C0Full,
		0x802221226BE55A64ull, 0xC2494954DA2C9789ull, 0xA02AA96B06DEB0FDull, 0xF2DB9BAA10B7BD6Cull, 0xC83553C5C8965D3Dull, 0x6F92829494E5ACC7ull, 0xFA42A8B73ABBF48Cull,
		0xCB772339BA1F17F9ull, 0x9C69A97284B578D7ull, 0xFF2A760414536EFBull, 0xC38413CF25E2D70Dull, 0xFEF5138519684ABAull, 0xF46518C2EF5B8CD1ull, 0x7EB258665FC25D69ull,
		0x98BF2F79D5993802ull, 0xEF2F773FFBD97A61ull, 0xBEEEFB584AFF8603ull, 0xAAFB550FFACFD8FAull, 0xEEAABA2E5DBF6784ull, 0x95BA2A53F983CF38ull, 0x952AB45CFA97A0B2ull,
		0xDD945A747BF26183ull, 0xBA756174393D88DFull, 0x94F971119AEEF9E4ull, 0xE912B9D1478CEB17ull, 0x7A37CD5601AAB85Dull, 0x91ABB422CCB812EEull, 0xAC62E055C10AB33Aull,
		0xB616A12B7FE617AAull, 0x577B986B314D6009ull, 0xE39C49765FDF9D94ull, 0xED5A7E85FDA0B80Bull, 0x8E41ADE9FBEBC27Dull, 0x14588F13BE847307ull, 0xB1D219647AE6B31Cull,
		0x596EB2D8AE258FC8ull, 0xDE469FBD99A05FE3ull, 0x6FCA5F8ED9AEF3BBull, 0x8AEC23D680043BEEull, 0x25DE7BB9480D5854ull, 0xADA72CCC20054AE9ull, 0xAF561AA79A10AE6Aull,
		0xD910F7FF28069DA4ull, 0x1B2BA1518094DA04ull, 0x87AA9AFF79042286ull, 0x90FB44D2F05D0842ull, 0xA99541BF57452B28ull, 0x353A1607AC744A53ull, 0xD3FA922F2D1675F2ull,
		0x42889B8997915CE8ull, 0x847C9B5D7C2E09B7ull, 0x69956135FEBADA11ull, 0xA59BC234DB398C25ull, 0x43FAB9837E699095ull, 0xCF02B2C21207EF2Eull, 0x94F967E45E03F4BBull,
		0x8161AFB94B44F57Dull, 0x1D1BE0EEBAC278F5ull, 0xA1BA1BA79E1632DCull, 0x6462D92A69731732ull, 0xCA28A291859BBF93ull, 0x7D7B8F7503CFDCFEull, 0xFCB2CB35E702AF78ull,
		0x5CDA735244C3D43Eull, 0x9DEFBF01B061ADABull, 0x3A0888136AFA64A7ull, 0xC56BAEC21C7A1916ull, 0x088AAA1845B8FDD0ull, 0xF6C69A72A3989F5Bull, 0x8AAD549E57273D45ull,
		0x9A3C2087A63F6399ull, 0x36AC54E2F678864Bull, 0xC0CB28A98FCF3C7Full, 0x84576A1BB416A7DDull, 0xF0FDF2D3F3C30B9Full, 0x656D44A2A11C51D5ull, 0x969EB7C47859E743ull,
		0x9F644AE5A4B1B325ull, 0xBC4665B596706114ull, 0x873D5D9F0DDE1FEEull, 0xEB57FF22FC0C7959ull, 0xA90CB506D155A7EAull, 0x9316FF75DD87CBD8ull, 0x09A7F12442D588F2ull,
		0xB7DCBF5354E9BECEull, 0x0C11ED6D538AEB2Full, 0xE5D3EF282A242E81ull, 0x8F1668C8A86DA5FAull, 0x8FA475791A569D10ull, 0xF96E017D694487BCull, 0xB38D92D760EC4455ull,
		0x37C981DCC395A9ACull, 0xE070F78D3927556Aull, 0x85BBE253F47B1417ull, 0x8C469AB843B89562ull, 0x93956D7478CCEC8Eull, 0xAF58416654A6BABBull, 0x387AC8D1970027B2ull,
		0xDB2E51BFE9D0696Aull, 0x06997B05FCC0319Eull, 0x88FCF317F22241E2ull, 0x441FECE3BDF81F03ull, 0xAB3C2FDDEEAAD25Aull, 0xD527E81CAD7626C3ull, 0xD60B3BD56A5586F1ull,
		0x8A71E223D8D3B074ull, 0x85C7056562757456ull, 0xF6872D5667844E49ull, 0xA738C6BEBB12D16Cull, 0xB428F8AC016561DBull, 0xD106F86E69D785C7ull, 0xE13336D701BEBA52ull,
		0x82A45B450226B39Cull, 0xECC0024661173473ull, 0xA34D721642B06084ull, 0x27F002D7F95D0190ull, 0xCC20CE9BD35C78A5ull, 0x31EC038DF7B441F4ull, 0xFF290242C83396CEull,
		0x7E67047175A15271ull, 0x9F79A169BD203E41ull, 0x0F0062C6E984D386ull, 0xC75809C42C684DD1ull, 0x52C07B78A3E60868ull, 0xF92E0C3537826145ull, 0xA7709A56CCDF8A82ull,
		0x9BBCC7A142B17CCBull, 0x88A66076400BB691ull, 0xC2ABF989935DDBFEull, 0x6ACFF893D00EA435ull, 0xF356F7EBF83552FEull, 0x0583F6B8C4124D43ull, 0x98165AF37B2153DEull,
		0xC3727A337A8B704Aull, 0xBE1BF1B059E9A8D6ull, 0x744F18C0592E4C5Cull, 0xEDA2EE1C7064130Cull, 0x1162DEF06F79DF73ull, 0x9485D4D1C63E8BE7ull, 0x8ADDCB5645AC2BA8ull,
		0xB9A74A0637CE2EE1ull, 0x6D953E2BD7173692ull, 0xE8111C87C5C1BA99ull, 0xC8FA8DB6CCDD0437ull, 0x910AB1D4DB9914A0ull, 0x1D9C9892400A22A2ull, 0xB54D5E4A127F59C8ull,
		0x2503BEB6D00CAB4Bull, 0xE2A0B5DC971F303Aull, 0x2E44AE64840FD61Dull, 0x8DA471A9DE737E24ull, 0x5CEAECFED289E5D2ull, 0xB10D8E1456105DADull, 0x7425A83E872C5F47ull,
		0xDD50F1996B947518ull, 0xD12F124E28F77719ull, 0x8A5296FFE33CC92Full, 0x82BD6B70D99AAA6Full, 0xACE73CBFDC0BFB7Bull, 0x636CC64D1001550Bull, 0xD8210BEFD30EFA5Aull,
		0x3C47F7E05401AA4Eull, 0x8714A775E3E95C78ull, 0x65ACFAEC34810A71ull, 0xA8D9D1535CE3B396ull, 0x7F1839A741A14D0Dull, 0xD31045A8341CA07Cull, 0x1EDE48111209A050ull,
		0x83EA2B892091E44Dull, 0x934AED0AAB460432ull, 0xA4E4B66B68B65D60ull, 0xF81DA84D5617853Full, 0xCE1DE40642E3F4B9ull, 0x36251260AB9D668Eull, 0x80D2AE83E9CE78F3ull,
		0xC1D72B7C6B426019ull, 0xA1075A24E4421730ull, 0xB24CF65B8612F81Full, 0xC94930AE1D529CFCull, 0xDEE033F26797B627ull, 0xFB9B7CD9A4A7443Cull, 0x169840EF017DA3B1ull,
		0x9D412E0806E88AA5ull, 0x8E1F289560EE864Eull, 0xC491798A08A2AD4Eull, 0xF1A6F2BAB92A27E2ull, 0xF5B5D7EC8ACB58A2ull, 0xAE10AF696774B1DBull, 0x9991A6F3D6BF1765ull,
		0xACCA6DA1E0A8EF29ull, 0xBFF610B0CC6EDD3Full, 0x17FD090A58D32AF3ull, 0xEFF394DCFF8A948Eull, 0xDDFC4B4CEF07F5B0ull, 0x95F83D0A1FB69CD9ull, 0x4ABDAF101564F98Eull,
		0xBB764C4CA7A4440Full, 0x9D6D1AD41ABE37F1ull, 0xEA53DF5FD18D5513ull, 0x84C86189216DC5EDull, 0x92746B9BE2F8552Cull, 0x32FD3CF5B4E49BB4ull, 0xB7118682DBB66A77ull,
		0x3FBC8C33221DC2A1ull, 0xE4D5E82392A40515ull, 0x0FABAF3FEAA5334Aull, 0x8F05B1163BA6832Dull, 0x29CB4D87F2A7400Eull, 0xB2C71D5BCA9023F8ull, 0x743E20E9EF511012ull,
		0xDF78E4B2BD342CF6ull, 0x914DA9246B255416ull, 0x8BAB8EEFB6409C1Aull, 0x1AD089B6C2F7548Eull, 0xAE9672ABA3D0C320ull, 0xA184AC2473B529B1ull, 0xDA3C0F568CC4F3E8ull,
		0xC9E5D72D90A2741Eull, 0x8865899617FB1871ull, 0x7E2FA67C7A658892ull, 0xAA7EEBFB9DF9DE8Dull, 0xDDBB901B98FEEAB7ull, 0xD51EA6FA85785631ull, 0x552A74227F3EA565ull,
		0x8533285C936B35DEull, 0xD53A88958F87275Full, 0xA67FF273B8460356ull, 0x8A892ABAF368F137ull, 0xD01FEF10A657842Cull, 0x2D2B7569B0432D85ull, 0x8213F56A67F6B29Bull,
		0x9C3B29620E29FC73ull, 0xA298F2C501F45F42ull, 0x8349F3BA91B47B8Full, 0xCB3F2F7642717713ull, 0x241C70A936219A73ull, 0xFE0EFB53D30DD4D7ull, 0xED238CD383AA0110ull,
		0x9EC95D1463E8A506ull, 0xF4363804324A40AAull, 0xC67BB4597CE2CE48ull, 0xB143C6053EDCD0D5ull, 0xF81AA16FDC1B81DAull, 0xDD94B7868E94050Aull, 0x9B10A4E5E9913128ull,
		0xCA7CF2B4191C8326ull, 0xC1D4CE1F63F57D72ull, 0xFD1C2F611F63A3F0ull, 0xF24A01A73CF2DCCFull, 0xBC633B39673C8CECull, 0x976E41088617CA01ull, 0xD5BE0503E085D813ull,
		0xBD49D14AA79DBC82ull, 0x4B2D8644D8A74E18ull, 0xEC9C459D51852BA2ull, 0xDDF8E7D60ED1219Eull, 0x93E1AB8252F33B45ull, 0xCABB90E5C942B503ull, 0xB8DA1662E7B00A17ull,
		0x3D6A751F3B936243ull, 0xE7109BFBA19C0C9Dull, 0x0CC512670A783AD4ull, 0x906A617D450187E2ull, 0x27FB2B80668B24C5ull, 0xB484F9DC9641E9DAull, 0xB1F9F660802DEDF6ull,
		0xE1A63853BBD26451ull, 0x5E7873F8A0396973ull, 0x8D07E33455637EB2ull, 0xDB0B487B6423E1E8ull, 0xB049DC016ABC5E5Full, 0x91CE1A9A3D2CDA62ull, 0xDC5C5301C56B75F7ull,
		0x7641A140CC7810FBull, 0x89B9B3E11B6329BAull, 0xA9E904C87FCB0A9Dull, 0xAC2820D9623BF429ull, 0x546345FA9FBDCD44ull, 0xD732290FBACAF133ull, 0xA97C177947AD4095ull,
		0x867F59A9D4BED6C0ull, 0x49ED8EABCCCC485Dull, 0xA81F301449EE8C70ull, 0x5C68F256BFFF5A74ull, 0xD226FC195C6A2F8Cull, 0x73832EEC6FFF3111ull, 0x83585D8FD9C25DB7ull,
		0xC831FD53C5FF7EABull, 0xA42E74F3D032F525ull, 0xBA3E7CA8B77F5E55ull, 0xCD3A1230C43FB26Full, 0x28CE1BD2E55F35EBull, 0x80444B5E7AA7CF85ull, 0x7980D163CF5B81B3ull,
		0xA0555E361951C366ull, 0xD7E105BCC332621Full, 0xC86AB5C39FA63440ull, 0x8DD9472BF3FEFAA7ull, 0xFA856334878FC150ull, 0xB14F98F6F0FEB951ull, 0x9C935E00D4B9D8D2ull,
		0x6ED1BF9A569F33D3ull, 0xC3B8358109E84F07ull, 0x0A862F80EC4700C8ull, 0xF4A642E14C6262C8ull, 0xCD27BB612758C0FAull, 0x98E7E9CCCFBD7DBDull, 0x8038D51CB897789Cull,
		0xBF21E44003ACDD2Cull, 0xE0470A63E6BD56C3ull, 0xEEEA5D5004981478ull, 0x1858CCFCE06CAC74ull, 0x95527A5202DF0CCBull, 0x0F37801E0C43EBC8ull, 0xBAA718E68396CFFDull,
		0xD30560258F54E6BAull, 0xE950DF20247C83FDull, 0x47C6B82EF32A2069ull, 0x91D28B7416CDD27Eull, 0x4CDC331D57FA5441ull, 0xB6472E511C81471Dull, 0xE0133FE4ADF8E952ull,
		0xE3D8F9E563A198E5ull, 0x58180FDDD97723A6ull, 0x8E679C2F5E44FF8Full, 0x570F09EAA7EA7648ull, 0xB201833B35D63F73ull, 0x2CD2CC6551E513DAull, 0xDE81E40A034BCF4Full,
		0xF8077F7EA65E58D1ull, 0x8B112E86420F6191ull, 0xFB04AFAF27FAF782ull, 0xADD57A27D29339F6ull, 0x79C5DB9AF1F9B563ull, 0xD94AD8B1C7380874ull, 0x18375281AE7822BCull,
		0x87CEC76F1C830548ull, 0x8F2293910D0B15B5ull, 0xA9C2794AE3A3C69Aull, 0xB2EB3875504DDB22ull, 0xD433179D9C8CB841ull, 0x5FA60692A46151EBull, 0x849FEEC281D7F328ull,
		0xDBC7C41BA6BCD333ull, 0xA5C7EA73224DEFF3ull, 0x12B9B522906C0800ull, 0xCF39E50FEAE16BEFull, 0xD768226B34870A00ull, 0x81842F29F2CCE375ull, 0xE6A1158300D46640ull,
		0xA1E53AF46F801C53ull, 0x60495AE3C1097FD0ull, 0xCA5E89B18B602368ull, 0x385BB19CB14BDFC4ull, 0xFCF62C1DEE382C42ull, 0x46729E03DD9ED7B5ull, 0x9E19DB92B4E31BA9ull,
		0x6C07A2C26A8346D1ull };

	constexpr auto pow10SigTable128MinExp	   = -343;
	constexpr auto pow10SigTable128MaxExp	   = 324;
	constexpr auto pow10SigTable128MinExactExp = 0;
	constexpr auto pow10SigTable128MaxExactExp = 55;

	JSONIFIER_INLINE void pow10TableGetSig128(const int32_t exp10, uint64_t hilo[2]) noexcept {
		const int32_t idx = exp10 - (pow10SigTable128MinExp);
		std::memcpy(hilo, pow10SigTable128.data() + idx * 2, 16);
	}

	JSONIFIER_INLINE void f64BinToDec(uint64_t sigRaw, int32_t expRaw, uint64_t sigBin, int32_t expBin, uint64_t* sigDec, int32_t* expDec) noexcept {
		const bool isEven			= !(sigBin & 1);
		const bool lowerBoundCloser = (sigRaw == 0 && expRaw > 1);

		const uint64_t cb  = 4 * sigBin;
		const uint64_t cbl = cb - 2 + lowerBoundCloser;
		const uint64_t cbr = cb + 2;
		const int32_t k	   = (expBin * 315653 - (lowerBoundCloser ? 131237 : 0)) >> 20;

		const int32_t exp10 = -k;
		const int32_t h		= expBin + ((exp10 * 217707) >> 16) + 1;

		uint64_t pow10hilo[2];
		pow10TableGetSig128(exp10, pow10hilo);
		uint64_t pow10hi = pow10hilo[0];
		uint64_t pow10lo = pow10hilo[1];
		pow10lo += (exp10 < pow10SigTable128MinExactExp || exp10 > pow10SigTable128MaxExactExp);

		const uint64_t vbl = roundToOdd(pow10hi, pow10lo, cbl << h);
		const uint64_t vb  = roundToOdd(pow10hi, pow10lo, cb << h);
		const uint64_t vbr = roundToOdd(pow10hi, pow10lo, cbr << h);

		const uint64_t lower = vbl + !isEven;
		const uint64_t upper = vbr - !isEven;

		bool uInside, wInside;
		const uint64_t s = vb / 4;

		if (s >= 10) {
			uint64_t sp = s / 10;
			uInside		= (lower <= 40 * sp);
			wInside		= (upper >= 40 * sp + 40);
			if (uInside != wInside) {
				*sigDec = sp + wInside;
				*expDec = k + 1;
				return;
			}
		}

		uInside = (lower <= 4 * s);
		wInside = (upper >= 4 * s + 4);

		uint64_t mid = 4 * s + 2;
		bool roundUp = (vb > mid) || (vb == mid && (s & 1) != 0);

		*sigDec = s + ((uInside != wInside) ? wInside : roundUp);
		*expDec = k;
	}


	constexpr std::array<uint8_t, 256> decTrailingZeroTable{ 2u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 1u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 1u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,
		1u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 1u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 1u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 1u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 1u, 0u, 0u,
		0u, 0u, 0u, 0u, 0u, 0u, 0u, 1u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 1u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u };

	template<typename char_type> JSONIFIER_INLINE char_type* writeU64Len15To17Trim(char_type* buf, uint64_t sig) noexcept {
		uint32_t tz1, tz2, tz;

		uint32_t abbccddee = uint32_t(sig / 100000000);
		uint32_t ffgghhii  = uint32_t(sig - uint64_t(abbccddee) * 100000000);
		uint32_t abbcc	   = abbccddee / 10000;
		uint32_t ddee	   = abbccddee - abbcc * 10000;
		uint32_t abb	   = uint32_t((uint64_t(abbcc) * 167773) >> 24);
		uint32_t a		   = (abb * 41) >> 12;
		uint32_t bb		   = abb - a * 100;
		uint32_t cc		   = abbcc - abb * 100;

		buf[0] = char_type(a + 0x30u);
		buf += a > 0;
		bool lz = bb < 10 && a == 0;
		std::memcpy(buf, charTable + (bb * 2 + lz), 2);
		buf -= lz;
		std::memcpy(buf + 2, charTable + 2 * cc, 2);

		if (ffgghhii) {
			uint32_t dd	  = (ddee * 5243) >> 19;
			uint32_t ee	  = ddee - dd * 100;
			uint32_t ffgg = uint32_t((uint64_t(ffgghhii) * 109951163) >> 40);
			uint32_t hhii = ffgghhii - ffgg * 10000;
			uint32_t ff	  = (ffgg * 5243) >> 19;
			uint32_t gg	  = ffgg - ff * 100;
			std::memcpy(buf + 4, charTable + 2 * dd, 2);
			std::memcpy(buf + 6, charTable + 2 * ee, 2);
			std::memcpy(buf + 8, charTable + 2 * ff, 2);
			std::memcpy(buf + 10, charTable + 2 * gg, 2);
			if (hhii) {
				uint32_t hh = (hhii * 5243) >> 19;
				uint32_t ii = hhii - hh * 100;
				std::memcpy(buf + 12, charTable + 2 * hh, 2);
				std::memcpy(buf + 14, charTable + 2 * ii, 2);
				tz1 = decTrailingZeroTable[hh];
				tz2 = decTrailingZeroTable[ii];
				tz	= ii ? tz2 : (tz1 + 2);
				buf += 16 - tz;
				return buf;
			} else {
				tz1 = decTrailingZeroTable[ff];
				tz2 = decTrailingZeroTable[gg];
				tz	= gg ? tz2 : (tz1 + 2);
				buf += 12 - tz;
				return buf;
			}
		} else {
			if (ddee) {
				uint32_t dd = (ddee * 5243) >> 19;
				uint32_t ee = ddee - dd * 100;
				std::memcpy(buf + 4, charTable + 2 * dd, 2);
				std::memcpy(buf + 6, charTable + 2 * ee, 2);
				tz1 = decTrailingZeroTable[dd];
				tz2 = decTrailingZeroTable[ee];
				tz	= ee ? tz2 : (tz1 + 2);
				buf += 8 - tz;
				return buf;
			} else {
				tz1 = decTrailingZeroTable[bb];
				tz2 = decTrailingZeroTable[cc];
				tz	= cc ? tz2 : (tz1 + tz2);
				buf += 4 - tz;
				return buf;
			}
		}
	}

	template<uint32_t x> constexpr uint32_t numbits() noexcept {
		return x < 2 ? x : 1 + numbits<(x >> 1)>();
	}

	template<std::floating_point value_type, typename char_type> JSONIFIER_INLINE char_type* toChars(char_type* buffer, value_type val) noexcept {
		static_assert(std::numeric_limits<value_type>::is_iec559);
		static_assert(std::numeric_limits<value_type>::radix == 2);
		static_assert(std::is_same_v<float, value_type> || std::is_same_v<double, value_type>);
		static_assert(sizeof(float) == 4 && sizeof(double) == 8);
		using raw_t = std::conditional_t<std::is_same_v<float, value_type>, uint32_t, uint64_t>;

		raw_t raw;
		std::memcpy(&raw, &val, sizeof(value_type));

		constexpr uint32_t exponentBits = numbits<std::numeric_limits<value_type>::max_exponent - std::numeric_limits<value_type>::min_exponent + 1>();
		constexpr raw_t sigMask			= raw_t(-1) >> (exponentBits + 1);
		bool sign						= (raw >> (sizeof(value_type) * 8 - 1));
		uint64_t sigRaw					= raw & sigMask;
		int32_t expRaw					= static_cast<int32_t>(raw << 1 >> (sizeof(raw_t) * 8 - exponentBits));

		if (expRaw == (uint32_t(1) << exponentBits) - 1) [[unlikely]] {
			std::memcpy(buffer, "null", 4);
			return buffer + 4;
		}
		if (sign) {
			*buffer = '-';
			++buffer;
		}
		if ((raw << 1) != 0) [[likely]] {
			uint64_t sigBin;
			int32_t expBin;
			if (expRaw == 0) [[unlikely]] {
				sigBin = sigRaw;
				expBin = 1 - (std::numeric_limits<value_type>::max_exponent - 1) - (std::numeric_limits<value_type>::digits - 1);
			} else {
				sigBin = sigRaw | uint64_t(1ull << (std::numeric_limits<value_type>::digits - 1));
				expBin = int32_t(expRaw) - (std::numeric_limits<value_type>::max_exponent - 1) - (std::numeric_limits<value_type>::digits - 1);
			}
			uint64_t sigDec;
			int32_t expDec;
			f64BinToDec(sigRaw, expRaw, sigBin, expBin, &sigDec, &expDec);
			if constexpr (std::is_same_v<value_type, float>) {
				sigDec *= 100000000;
				expDec -= 8;
			}

			int32_t sigLen = 17;
			sigLen -= (sigDec < 100000000ull * 100000000ull);
			sigLen -= (sigDec < 100000000ull * 10000000ull);

			int32_t dotPos = sigLen + expDec;

			if (-6 < dotPos && dotPos <= 21) {
				if (dotPos <= 0) {
					auto numHdr = buffer + (2 - dotPos);
					auto numEnd = writeU64Len15To17Trim(numHdr, sigDec);
					buffer[0]	= 0x30u;
					buffer[1]	= '.';
					buffer += 2;
					std::memset(buffer, 0x30u, static_cast<uint64_t>(numHdr - buffer));
					return numEnd;
				} else {
					std::memset(buffer, 0x30u, 8);
					std::memset(buffer + 8, 0x30u, 8);
					std::memset(buffer + 16, 0x30u, 8);
					auto numHdr = buffer + 1;
					auto numEnd = writeU64Len15To17Trim(numHdr, sigDec);
					std::memmove(buffer, buffer + 1, static_cast<uint64_t>(dotPos));
					buffer[dotPos] = '.';
					return ((numEnd - numHdr) <= dotPos) ? buffer + dotPos : numEnd;
				}
			} else {
				auto end = writeU64Len15To17Trim(buffer + 1, sigDec);
				end -= (end == buffer + 2);
				expDec += sigLen - 1;
				buffer[0] = buffer[1];
				buffer[1] = '.';
				end[0]	  = 'E';
				buffer	  = end + 1;
				buffer[0] = '-';
				buffer += expDec < 0;
				expDec = std::abs(expDec);
				if (expDec < 100) {
					uint32_t lz = expDec < 10;
					std::memcpy(buffer, charTable + (expDec * 2 + lz), 2);
					return buffer + 2 - lz;
				} else {
					const uint32_t hi = (uint32_t(expDec) * 656) >> 16;
					const uint32_t lo = uint32_t(expDec) - hi * 100;
					buffer[0]		  = char_type(hi) + char_type(0x30);
					std::memcpy(&buffer[1], charTable + (lo * 2), 2);
					return buffer + 3;
				}
			}
		} else [[unlikely]] {
			*buffer = 0x30u;
			return buffer + 1;
		}
	}

}